// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: github.com/dipdup-io/starknet-indexer/pkg/grpc/proto/entity_filters.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvokeFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Version        *EnumFilter       `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Contract       *BytesFilter      `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	Selector       *EqualityFilter   `protobuf:"bytes,6,opt,name=selector,proto3" json:"selector,omitempty"`
	Entrypoint     *StringFilter     `protobuf:"bytes,7,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,8,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InvokeFilters) Reset() {
	*x = InvokeFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeFilters) ProtoMessage() {}

func (x *InvokeFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeFilters.ProtoReflect.Descriptor instead.
func (*InvokeFilters) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{0}
}

func (x *InvokeFilters) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *InvokeFilters) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InvokeFilters) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InvokeFilters) GetVersion() *EnumFilter {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *InvokeFilters) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *InvokeFilters) GetSelector() *EqualityFilter {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *InvokeFilters) GetEntrypoint() *StringFilter {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *InvokeFilters) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *InvokeFilters) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeclareFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height  *IntegerFilter `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time    *TimeFilter    `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status  *EnumFilter    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Version *EnumFilter    `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Id      *IntegerFilter `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeclareFilters) Reset() {
	*x = DeclareFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareFilters) ProtoMessage() {}

func (x *DeclareFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareFilters.ProtoReflect.Descriptor instead.
func (*DeclareFilters) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{1}
}

func (x *DeclareFilters) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *DeclareFilters) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeclareFilters) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeclareFilters) GetVersion() *EnumFilter {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeclareFilters) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeployFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Class          *BytesFilter      `protobuf:"bytes,4,opt,name=class,proto3" json:"class,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,5,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeployFilters) Reset() {
	*x = DeployFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployFilters) ProtoMessage() {}

func (x *DeployFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployFilters.ProtoReflect.Descriptor instead.
func (*DeployFilters) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{2}
}

func (x *DeployFilters) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *DeployFilters) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeployFilters) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeployFilters) GetClass() *BytesFilter {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *DeployFilters) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *DeployFilters) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeployAccountFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Class          *BytesFilter      `protobuf:"bytes,4,opt,name=class,proto3" json:"class,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,5,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeployAccountFilters) Reset() {
	*x = DeployAccountFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAccountFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAccountFilters) ProtoMessage() {}

func (x *DeployAccountFilters) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAccountFilters.ProtoReflect.Descriptor instead.
func (*DeployAccountFilters) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{3}
}

func (x *DeployAccountFilters) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *DeployAccountFilters) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DeployAccountFilters) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeployAccountFilters) GetClass() *BytesFilter {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *DeployAccountFilters) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *DeployAccountFilters) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type L1HandlerFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Contract       *BytesFilter      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Selector       *EqualityFilter   `protobuf:"bytes,5,opt,name=selector,proto3" json:"selector,omitempty"`
	Entrypoint     *StringFilter     `protobuf:"bytes,6,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,7,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *L1HandlerFilter) Reset() {
	*x = L1HandlerFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1HandlerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1HandlerFilter) ProtoMessage() {}

func (x *L1HandlerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1HandlerFilter.ProtoReflect.Descriptor instead.
func (*L1HandlerFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{4}
}

func (x *L1HandlerFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *L1HandlerFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *L1HandlerFilter) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *L1HandlerFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *L1HandlerFilter) GetSelector() *EqualityFilter {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *L1HandlerFilter) GetEntrypoint() *StringFilter {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *L1HandlerFilter) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *L1HandlerFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type InternalFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Contract       *BytesFilter      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Caller         *BytesFilter      `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	Class          *BytesFilter      `protobuf:"bytes,6,opt,name=class,proto3" json:"class,omitempty"`
	Selector       *EqualityFilter   `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector,omitempty"`
	Entrypoint     *StringFilter     `protobuf:"bytes,8,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	EntrypointType *EnumFilter       `protobuf:"bytes,9,opt,name=entrypoint_type,json=entrypointType,proto3" json:"entrypoint_type,omitempty"`
	CallType       *EnumFilter       `protobuf:"bytes,10,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,11,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InternalFilter) Reset() {
	*x = InternalFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalFilter) ProtoMessage() {}

func (x *InternalFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalFilter.ProtoReflect.Descriptor instead.
func (*InternalFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{5}
}

func (x *InternalFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *InternalFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *InternalFilter) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InternalFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *InternalFilter) GetCaller() *BytesFilter {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *InternalFilter) GetClass() *BytesFilter {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *InternalFilter) GetSelector() *EqualityFilter {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *InternalFilter) GetEntrypoint() *StringFilter {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *InternalFilter) GetEntrypointType() *EnumFilter {
	if x != nil {
		return x.EntrypointType
	}
	return nil
}

func (x *InternalFilter) GetCallType() *EnumFilter {
	if x != nil {
		return x.CallType
	}
	return nil
}

func (x *InternalFilter) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *InternalFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type FeeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time           *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Status         *EnumFilter       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Contract       *BytesFilter      `protobuf:"bytes,4,opt,name=contract,proto3" json:"contract,omitempty"`
	Caller         *BytesFilter      `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	Class          *BytesFilter      `protobuf:"bytes,6,opt,name=class,proto3" json:"class,omitempty"`
	Selector       *EqualityFilter   `protobuf:"bytes,7,opt,name=selector,proto3" json:"selector,omitempty"`
	Entrypoint     *StringFilter     `protobuf:"bytes,8,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	EntrypointType *EnumFilter       `protobuf:"bytes,9,opt,name=entrypoint_type,json=entrypointType,proto3" json:"entrypoint_type,omitempty"`
	CallType       *EnumFilter       `protobuf:"bytes,10,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	ParsedCalldata map[string]string `protobuf:"bytes,11,rep,name=parsed_calldata,json=parsedCalldata,proto3" json:"parsed_calldata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id             *IntegerFilter    `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FeeFilter) Reset() {
	*x = FeeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeFilter) ProtoMessage() {}

func (x *FeeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeFilter.ProtoReflect.Descriptor instead.
func (*FeeFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{6}
}

func (x *FeeFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *FeeFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *FeeFilter) GetStatus() *EnumFilter {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FeeFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *FeeFilter) GetCaller() *BytesFilter {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *FeeFilter) GetClass() *BytesFilter {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *FeeFilter) GetSelector() *EqualityFilter {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *FeeFilter) GetEntrypoint() *StringFilter {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *FeeFilter) GetEntrypointType() *EnumFilter {
	if x != nil {
		return x.EntrypointType
	}
	return nil
}

func (x *FeeFilter) GetCallType() *EnumFilter {
	if x != nil {
		return x.CallType
	}
	return nil
}

func (x *FeeFilter) GetParsedCalldata() map[string]string {
	if x != nil {
		return x.ParsedCalldata
	}
	return nil
}

func (x *FeeFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height     *IntegerFilter    `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time       *TimeFilter       `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Contract   *BytesFilter      `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	From       *BytesFilter      `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Name       *StringFilter     `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ParsedData map[string]string `protobuf:"bytes,6,rep,name=parsed_data,json=parsedData,proto3" json:"parsed_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id         *IntegerFilter    `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventFilter) Reset() {
	*x = EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFilter) ProtoMessage() {}

func (x *EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFilter.ProtoReflect.Descriptor instead.
func (*EventFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{7}
}

func (x *EventFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *EventFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EventFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *EventFilter) GetFrom() *BytesFilter {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EventFilter) GetName() *StringFilter {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EventFilter) GetParsedData() map[string]string {
	if x != nil {
		return x.ParsedData
	}
	return nil
}

func (x *EventFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type MessageFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   *IntegerFilter  `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time     *TimeFilter     `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Contract *BytesFilter    `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	From     *BytesFilter    `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To       *BytesFilter    `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Selector *EqualityFilter `protobuf:"bytes,6,opt,name=selector,proto3" json:"selector,omitempty"`
	Id       *IntegerFilter  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MessageFilter) Reset() {
	*x = MessageFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFilter) ProtoMessage() {}

func (x *MessageFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFilter.ProtoReflect.Descriptor instead.
func (*MessageFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{8}
}

func (x *MessageFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *MessageFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *MessageFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *MessageFilter) GetFrom() *BytesFilter {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *MessageFilter) GetTo() *BytesFilter {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *MessageFilter) GetSelector() *EqualityFilter {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *MessageFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type TransferFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   *IntegerFilter `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Time     *TimeFilter    `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Contract *BytesFilter   `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	From     *BytesFilter   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To       *BytesFilter   `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	TokenId  *StringFilter  `protobuf:"bytes,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Id       *IntegerFilter `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TransferFilter) Reset() {
	*x = TransferFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFilter) ProtoMessage() {}

func (x *TransferFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFilter.ProtoReflect.Descriptor instead.
func (*TransferFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{9}
}

func (x *TransferFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *TransferFilter) GetTime() *TimeFilter {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TransferFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TransferFilter) GetFrom() *BytesFilter {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransferFilter) GetTo() *BytesFilter {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransferFilter) GetTokenId() *StringFilter {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TransferFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type StorageDiffFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   *IntegerFilter  `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	Contract *BytesFilter    `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Key      *EqualityFilter `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Id       *IntegerFilter  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StorageDiffFilter) Reset() {
	*x = StorageDiffFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDiffFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDiffFilter) ProtoMessage() {}

func (x *StorageDiffFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDiffFilter.ProtoReflect.Descriptor instead.
func (*StorageDiffFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{10}
}

func (x *StorageDiffFilter) GetHeight() *IntegerFilter {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *StorageDiffFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *StorageDiffFilter) GetKey() *EqualityFilter {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *StorageDiffFilter) GetId() *IntegerFilter {
	if x != nil {
		return x.Id
	}
	return nil
}

type TokenBalanceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    *BytesFilter  `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Contract *BytesFilter  `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	TokenId  *StringFilter `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *TokenBalanceFilter) Reset() {
	*x = TokenBalanceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalanceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalanceFilter) ProtoMessage() {}

func (x *TokenBalanceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalanceFilter.ProtoReflect.Descriptor instead.
func (*TokenBalanceFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{11}
}

func (x *TokenBalanceFilter) GetOwner() *BytesFilter {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenBalanceFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TokenBalanceFilter) GetTokenId() *StringFilter {
	if x != nil {
		return x.TokenId
	}
	return nil
}

type TokenFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *BytesFilter `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Owner    *BytesFilter `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Type     *EnumFilter  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TokenFilter) Reset() {
	*x = TokenFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFilter) ProtoMessage() {}

func (x *TokenFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFilter.ProtoReflect.Descriptor instead.
func (*TokenFilter) Descriptor() ([]byte, []int) {
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP(), []int{12}
}

func (x *TokenFilter) GetContract() *BytesFilter {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *TokenFilter) GetOwner() *BytesFilter {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenFilter) GetType() *EnumFilter {
	if x != nil {
		return x.Type
	}
	return nil
}

var File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto protoreflect.FileDescriptor

var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDesc = []byte{
	0x0a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70,
	0x64, 0x75, 0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x70, 0x64, 0x75, 0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xf5, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x03,
	0x0a, 0x0f, 0x4c, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x31, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x05, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x41,
	0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9d, 0x05, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x2a, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x41,
	0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8d, 0x03, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x27,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb9, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x22, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb7, 0x02,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x70, 0x64, 0x75,
	0x70, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescOnce sync.Once
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescData = file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDesc
)

func file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescGZIP() []byte {
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescOnce.Do(func() {
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescData)
	})
	return file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDescData
}

var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_goTypes = []interface{}{
	(*InvokeFilters)(nil),        // 0: proto.InvokeFilters
	(*DeclareFilters)(nil),       // 1: proto.DeclareFilters
	(*DeployFilters)(nil),        // 2: proto.DeployFilters
	(*DeployAccountFilters)(nil), // 3: proto.DeployAccountFilters
	(*L1HandlerFilter)(nil),      // 4: proto.L1HandlerFilter
	(*InternalFilter)(nil),       // 5: proto.InternalFilter
	(*FeeFilter)(nil),            // 6: proto.FeeFilter
	(*EventFilter)(nil),          // 7: proto.EventFilter
	(*MessageFilter)(nil),        // 8: proto.MessageFilter
	(*TransferFilter)(nil),       // 9: proto.TransferFilter
	(*StorageDiffFilter)(nil),    // 10: proto.StorageDiffFilter
	(*TokenBalanceFilter)(nil),   // 11: proto.TokenBalanceFilter
	(*TokenFilter)(nil),          // 12: proto.TokenFilter
	nil,                          // 13: proto.InvokeFilters.ParsedCalldataEntry
	nil,                          // 14: proto.DeployFilters.ParsedCalldataEntry
	nil,                          // 15: proto.DeployAccountFilters.ParsedCalldataEntry
	nil,                          // 16: proto.L1HandlerFilter.ParsedCalldataEntry
	nil,                          // 17: proto.InternalFilter.ParsedCalldataEntry
	nil,                          // 18: proto.FeeFilter.ParsedCalldataEntry
	nil,                          // 19: proto.EventFilter.ParsedDataEntry
	(*IntegerFilter)(nil),        // 20: proto.IntegerFilter
	(*TimeFilter)(nil),           // 21: proto.TimeFilter
	(*EnumFilter)(nil),           // 22: proto.EnumFilter
	(*BytesFilter)(nil),          // 23: proto.BytesFilter
	(*EqualityFilter)(nil),       // 24: proto.EqualityFilter
	(*StringFilter)(nil),         // 25: proto.StringFilter
}
var file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_depIdxs = []int32{
	20, // 0: proto.InvokeFilters.height:type_name -> proto.IntegerFilter
	21, // 1: proto.InvokeFilters.time:type_name -> proto.TimeFilter
	22, // 2: proto.InvokeFilters.status:type_name -> proto.EnumFilter
	22, // 3: proto.InvokeFilters.version:type_name -> proto.EnumFilter
	23, // 4: proto.InvokeFilters.contract:type_name -> proto.BytesFilter
	24, // 5: proto.InvokeFilters.selector:type_name -> proto.EqualityFilter
	25, // 6: proto.InvokeFilters.entrypoint:type_name -> proto.StringFilter
	13, // 7: proto.InvokeFilters.parsed_calldata:type_name -> proto.InvokeFilters.ParsedCalldataEntry
	20, // 8: proto.InvokeFilters.id:type_name -> proto.IntegerFilter
	20, // 9: proto.DeclareFilters.height:type_name -> proto.IntegerFilter
	21, // 10: proto.DeclareFilters.time:type_name -> proto.TimeFilter
	22, // 11: proto.DeclareFilters.status:type_name -> proto.EnumFilter
	22, // 12: proto.DeclareFilters.version:type_name -> proto.EnumFilter
	20, // 13: proto.DeclareFilters.id:type_name -> proto.IntegerFilter
	20, // 14: proto.DeployFilters.height:type_name -> proto.IntegerFilter
	21, // 15: proto.DeployFilters.time:type_name -> proto.TimeFilter
	22, // 16: proto.DeployFilters.status:type_name -> proto.EnumFilter
	23, // 17: proto.DeployFilters.class:type_name -> proto.BytesFilter
	14, // 18: proto.DeployFilters.parsed_calldata:type_name -> proto.DeployFilters.ParsedCalldataEntry
	20, // 19: proto.DeployFilters.id:type_name -> proto.IntegerFilter
	20, // 20: proto.DeployAccountFilters.height:type_name -> proto.IntegerFilter
	21, // 21: proto.DeployAccountFilters.time:type_name -> proto.TimeFilter
	22, // 22: proto.DeployAccountFilters.status:type_name -> proto.EnumFilter
	23, // 23: proto.DeployAccountFilters.class:type_name -> proto.BytesFilter
	15, // 24: proto.DeployAccountFilters.parsed_calldata:type_name -> proto.DeployAccountFilters.ParsedCalldataEntry
	20, // 25: proto.DeployAccountFilters.id:type_name -> proto.IntegerFilter
	20, // 26: proto.L1HandlerFilter.height:type_name -> proto.IntegerFilter
	21, // 27: proto.L1HandlerFilter.time:type_name -> proto.TimeFilter
	22, // 28: proto.L1HandlerFilter.status:type_name -> proto.EnumFilter
	23, // 29: proto.L1HandlerFilter.contract:type_name -> proto.BytesFilter
	24, // 30: proto.L1HandlerFilter.selector:type_name -> proto.EqualityFilter
	25, // 31: proto.L1HandlerFilter.entrypoint:type_name -> proto.StringFilter
	16, // 32: proto.L1HandlerFilter.parsed_calldata:type_name -> proto.L1HandlerFilter.ParsedCalldataEntry
	20, // 33: proto.L1HandlerFilter.id:type_name -> proto.IntegerFilter
	20, // 34: proto.InternalFilter.height:type_name -> proto.IntegerFilter
	21, // 35: proto.InternalFilter.time:type_name -> proto.TimeFilter
	22, // 36: proto.InternalFilter.status:type_name -> proto.EnumFilter
	23, // 37: proto.InternalFilter.contract:type_name -> proto.BytesFilter
	23, // 38: proto.InternalFilter.caller:type_name -> proto.BytesFilter
	23, // 39: proto.InternalFilter.class:type_name -> proto.BytesFilter
	24, // 40: proto.InternalFilter.selector:type_name -> proto.EqualityFilter
	25, // 41: proto.InternalFilter.entrypoint:type_name -> proto.StringFilter
	22, // 42: proto.InternalFilter.entrypoint_type:type_name -> proto.EnumFilter
	22, // 43: proto.InternalFilter.call_type:type_name -> proto.EnumFilter
	17, // 44: proto.InternalFilter.parsed_calldata:type_name -> proto.InternalFilter.ParsedCalldataEntry
	20, // 45: proto.InternalFilter.id:type_name -> proto.IntegerFilter
	20, // 46: proto.FeeFilter.height:type_name -> proto.IntegerFilter
	21, // 47: proto.FeeFilter.time:type_name -> proto.TimeFilter
	22, // 48: proto.FeeFilter.status:type_name -> proto.EnumFilter
	23, // 49: proto.FeeFilter.contract:type_name -> proto.BytesFilter
	23, // 50: proto.FeeFilter.caller:type_name -> proto.BytesFilter
	23, // 51: proto.FeeFilter.class:type_name -> proto.BytesFilter
	24, // 52: proto.FeeFilter.selector:type_name -> proto.EqualityFilter
	25, // 53: proto.FeeFilter.entrypoint:type_name -> proto.StringFilter
	22, // 54: proto.FeeFilter.entrypoint_type:type_name -> proto.EnumFilter
	22, // 55: proto.FeeFilter.call_type:type_name -> proto.EnumFilter
	18, // 56: proto.FeeFilter.parsed_calldata:type_name -> proto.FeeFilter.ParsedCalldataEntry
	20, // 57: proto.FeeFilter.id:type_name -> proto.IntegerFilter
	20, // 58: proto.EventFilter.height:type_name -> proto.IntegerFilter
	21, // 59: proto.EventFilter.time:type_name -> proto.TimeFilter
	23, // 60: proto.EventFilter.contract:type_name -> proto.BytesFilter
	23, // 61: proto.EventFilter.from:type_name -> proto.BytesFilter
	25, // 62: proto.EventFilter.name:type_name -> proto.StringFilter
	19, // 63: proto.EventFilter.parsed_data:type_name -> proto.EventFilter.ParsedDataEntry
	20, // 64: proto.EventFilter.id:type_name -> proto.IntegerFilter
	20, // 65: proto.MessageFilter.height:type_name -> proto.IntegerFilter
	21, // 66: proto.MessageFilter.time:type_name -> proto.TimeFilter
	23, // 67: proto.MessageFilter.contract:type_name -> proto.BytesFilter
	23, // 68: proto.MessageFilter.from:type_name -> proto.BytesFilter
	23, // 69: proto.MessageFilter.to:type_name -> proto.BytesFilter
	24, // 70: proto.MessageFilter.selector:type_name -> proto.EqualityFilter
	20, // 71: proto.MessageFilter.id:type_name -> proto.IntegerFilter
	20, // 72: proto.TransferFilter.height:type_name -> proto.IntegerFilter
	21, // 73: proto.TransferFilter.time:type_name -> proto.TimeFilter
	23, // 74: proto.TransferFilter.contract:type_name -> proto.BytesFilter
	23, // 75: proto.TransferFilter.from:type_name -> proto.BytesFilter
	23, // 76: proto.TransferFilter.to:type_name -> proto.BytesFilter
	25, // 77: proto.TransferFilter.token_id:type_name -> proto.StringFilter
	20, // 78: proto.TransferFilter.id:type_name -> proto.IntegerFilter
	20, // 79: proto.StorageDiffFilter.height:type_name -> proto.IntegerFilter
	23, // 80: proto.StorageDiffFilter.contract:type_name -> proto.BytesFilter
	24, // 81: proto.StorageDiffFilter.key:type_name -> proto.EqualityFilter
	20, // 82: proto.StorageDiffFilter.id:type_name -> proto.IntegerFilter
	23, // 83: proto.TokenBalanceFilter.owner:type_name -> proto.BytesFilter
	23, // 84: proto.TokenBalanceFilter.contract:type_name -> proto.BytesFilter
	25, // 85: proto.TokenBalanceFilter.token_id:type_name -> proto.StringFilter
	23, // 86: proto.TokenFilter.contract:type_name -> proto.BytesFilter
	23, // 87: proto.TokenFilter.owner:type_name -> proto.BytesFilter
	22, // 88: proto.TokenFilter.type:type_name -> proto.EnumFilter
	89, // [89:89] is the sub-list for method output_type
	89, // [89:89] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_init() }
func file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_init() {
	if File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto != nil {
		return
	}
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_filters_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAccountFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1HandlerFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDiffFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalanceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_goTypes,
		DependencyIndexes: file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_depIdxs,
		MessageInfos:      file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_msgTypes,
	}.Build()
	File_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto = out.File
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_rawDesc = nil
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_goTypes = nil
	file_github_com_dipdup_io_starknet_indexer_pkg_grpc_proto_entity_filters_proto_depIdxs = nil
}
