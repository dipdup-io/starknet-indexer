syntax = "proto3";

package proto;

option go_package = "github.com/dipdup-io/starknet-indexer/pkg/grpc/pb";

message Block {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    string version = 4;
    uint64 tx_count = 5;
    uint64 invokes_count = 6;
    uint64 declares_count = 7;
    uint64 deploys_count = 8;
    uint64 deploy_account_count = 9;
    uint64 l1_handlers_count = 10;
    uint64 storage_diffs_count = 11;
    uint64 status = 12;
    bytes hash = 13;
    bytes parent_hash = 14;
    bytes new_root = 15;
    bytes sequencer_address = 16;
}

message Declare {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 version = 4;
    uint64 position = 5;
    optional Address sender = 6;
    optional Address contract = 7;
    uint64 status = 8;
    bytes class = 9;
    bytes hash = 10;
    string max_fee = 11;
    string nonce = 12;
}

message DeployAccount {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 position = 4;
    Address contract = 5;
    uint64 status = 6;
    bytes class = 7;
    bytes hash = 8;
    bytes salt = 9;
    string max_fee = 10;
    string nonce = 11;
    repeated string calldata = 12;
    bytes parsed_calldata = 13;
}

message Deploy {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 position = 4;
    Address contract = 5;
    uint64 status = 6;
    bytes class = 7;
    bytes hash = 8;
    bytes salt = 9;
    repeated string calldata = 10;
    bytes parsed_calldata = 11;
}

message Event {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 order = 4;
    Address contract = 5;
    Address from = 6;
    repeated string keys = 7;
    repeated string data = 8;
    string name = 9;
    bytes parsed_data = 10;
}

message Fee {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    Address contract = 4;
    Address caller = 5;
    bytes class = 6;
    bytes selector = 7;
    uint64 entrypoint_type = 8;
    uint64 call_type = 9;
    repeated string calldata = 10;
    repeated string result = 11;
    string entrypoint = 12;
    bytes parsed_calldata = 13;
}

message Internal {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 status = 4;
    bytes hash = 5;
    Address contract = 6;
    Address caller = 7;
    bytes class = 8;
    bytes selector = 9;
    uint64 entrypoint_type = 10;
    uint64 call_type = 11;
    repeated string calldata = 12;
    repeated string result = 13;
    string entrypoint = 14;
    bytes parsed_calldata = 15;
    bytes parsed_result = 16;
}

message Invoke {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 status = 4;
    bytes hash = 5;
    uint64 version = 6;
    uint64 position = 7;
    Address contract = 8;
    bytes selector = 9;
    string max_fee = 10;
    string nonce = 11;
    repeated string calldata = 12;
    string entrypoint = 13;
    bytes parsed_calldata = 14;
}

message L1Handler {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    uint64 status = 4;
    bytes hash = 5;
    uint64 position = 6;
    Address contract = 7;
    bytes selector = 8;
    string max_fee = 9;
    string nonce = 10;
    repeated string calldata = 11;
    string entrypoint = 12;
    bytes parsed_calldata = 13;
}

message StarknetMessage {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    Address contract = 4;
    Address from = 5;
    Address to = 6;
    string selector = 7;
    string nonce = 8;
    repeated string payload = 9; 
}

message StorageDiff {
    uint64 id = 1;
    uint64 height = 2;
    Address contract = 3;
    bytes key = 4;
    bytes value = 5; 
}

message TokenBalance {
    Address owner = 1;
    Address contract = 2;
    string token_id = 3;
    string balance = 4;
}

message Transfer {
    uint64 id = 1;
    uint64 height = 2;
    uint64 time = 3;
    Address contract = 4;
    Address from = 5;
    Address to = 6;
    string amount = 7;
    string token_id = 8;
}

message Token {
    uint64 id = 1;
    uint64 first_height = 2;
    Address contract = 3;
    string token_id = 4;
    string type = 5;
}

message Address {
    uint64 id = 1;
    bytes hash = 2;
    optional uint64 class_id = 3;
    uint64 height = 4;
}

message EndOfBlock {
    uint64 height = 1;
}

message Proxy {
    uint64 id = 1;
    bytes hash = 2;
    uint32 type = 3;
}