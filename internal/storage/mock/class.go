// Code generated by MockGen. DO NOT EDIT.
// Source: class.go
//
// Generated by this command:
//
//	mockgen -source=class.go -destination=mock/class.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIClass is a mock of IClass interface.
type MockIClass struct {
	ctrl     *gomock.Controller
	recorder *MockIClassMockRecorder
}

// MockIClassMockRecorder is the mock recorder for MockIClass.
type MockIClassMockRecorder struct {
	mock *MockIClass
}

// NewMockIClass creates a new mock instance.
func NewMockIClass(ctrl *gomock.Controller) *MockIClass {
	mock := &MockIClass{ctrl: ctrl}
	mock.recorder = &MockIClassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClass) EXPECT() *MockIClassMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIClass) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIClassMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IClassCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIClass)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IClassCursorListCall{Call: call}
}

// IClassCursorListCall wrap *gomock.Call
type IClassCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassCursorListCall) Return(arg0 []*storage.Class, arg1 error) *IClassCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Class, error)) *IClassCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Class, error)) *IClassCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByHash mocks base method.
func (m *MockIClass) GetByHash(ctx context.Context, hash []byte) (storage.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", ctx, hash)
	ret0, _ := ret[0].(storage.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockIClassMockRecorder) GetByHash(ctx, hash any) *IClassGetByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockIClass)(nil).GetByHash), ctx, hash)
	return &IClassGetByHashCall{Call: call}
}

// IClassGetByHashCall wrap *gomock.Call
type IClassGetByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassGetByHashCall) Return(arg0 storage.Class, arg1 error) *IClassGetByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassGetByHashCall) Do(f func(context.Context, []byte) (storage.Class, error)) *IClassGetByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassGetByHashCall) DoAndReturn(f func(context.Context, []byte) (storage.Class, error)) *IClassGetByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIClass) GetByID(ctx context.Context, id uint64) (*storage.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIClassMockRecorder) GetByID(ctx, id any) *IClassGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIClass)(nil).GetByID), ctx, id)
	return &IClassGetByIDCall{Call: call}
}

// IClassGetByIDCall wrap *gomock.Call
type IClassGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassGetByIDCall) Return(arg0 *storage.Class, arg1 error) *IClassGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassGetByIDCall) Do(f func(context.Context, uint64) (*storage.Class, error)) *IClassGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Class, error)) *IClassGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnresolved mocks base method.
func (m *MockIClass) GetUnresolved(ctx context.Context) ([]storage.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnresolved", ctx)
	ret0, _ := ret[0].([]storage.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnresolved indicates an expected call of GetUnresolved.
func (mr *MockIClassMockRecorder) GetUnresolved(ctx any) *IClassGetUnresolvedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolved", reflect.TypeOf((*MockIClass)(nil).GetUnresolved), ctx)
	return &IClassGetUnresolvedCall{Call: call}
}

// IClassGetUnresolvedCall wrap *gomock.Call
type IClassGetUnresolvedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassGetUnresolvedCall) Return(arg0 []storage.Class, arg1 error) *IClassGetUnresolvedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassGetUnresolvedCall) Do(f func(context.Context) ([]storage.Class, error)) *IClassGetUnresolvedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassGetUnresolvedCall) DoAndReturn(f func(context.Context) ([]storage.Class, error)) *IClassGetUnresolvedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIClass) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIClassMockRecorder) IsNoRows(err any) *IClassIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIClass)(nil).IsNoRows), err)
	return &IClassIsNoRowsCall{Call: call}
}

// IClassIsNoRowsCall wrap *gomock.Call
type IClassIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassIsNoRowsCall) Return(arg0 bool) *IClassIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassIsNoRowsCall) Do(f func(error) bool) *IClassIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassIsNoRowsCall) DoAndReturn(f func(error) bool) *IClassIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIClass) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIClassMockRecorder) LastID(ctx any) *IClassLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIClass)(nil).LastID), ctx)
	return &IClassLastIDCall{Call: call}
}

// IClassLastIDCall wrap *gomock.Call
type IClassLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassLastIDCall) Return(arg0 uint64, arg1 error) *IClassLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassLastIDCall) Do(f func(context.Context) (uint64, error)) *IClassLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IClassLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIClass) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIClassMockRecorder) List(ctx, limit, offset, order any) *IClassListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIClass)(nil).List), ctx, limit, offset, order)
	return &IClassListCall{Call: call}
}

// IClassListCall wrap *gomock.Call
type IClassListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassListCall) Return(arg0 []*storage.Class, arg1 error) *IClassListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Class, error)) *IClassListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Class, error)) *IClassListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIClass) Save(ctx context.Context, m *storage.Class) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIClassMockRecorder) Save(ctx, m any) *IClassSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIClass)(nil).Save), ctx, m)
	return &IClassSaveCall{Call: call}
}

// IClassSaveCall wrap *gomock.Call
type IClassSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassSaveCall) Return(arg0 error) *IClassSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassSaveCall) Do(f func(context.Context, *storage.Class) error) *IClassSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassSaveCall) DoAndReturn(f func(context.Context, *storage.Class) error) *IClassSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIClass) Update(ctx context.Context, m *storage.Class) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIClassMockRecorder) Update(ctx, m any) *IClassUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIClass)(nil).Update), ctx, m)
	return &IClassUpdateCall{Call: call}
}

// IClassUpdateCall wrap *gomock.Call
type IClassUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassUpdateCall) Return(arg0 error) *IClassUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassUpdateCall) Do(f func(context.Context, *storage.Class) error) *IClassUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassUpdateCall) DoAndReturn(f func(context.Context, *storage.Class) error) *IClassUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
