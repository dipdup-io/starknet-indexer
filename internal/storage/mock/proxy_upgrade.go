// Code generated by MockGen. DO NOT EDIT.
// Source: proxy_upgrade.go
//
// Generated by this command:
//
//	mockgen -source=proxy_upgrade.go -destination=mock/proxy_upgrade.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIProxyUpgrade is a mock of IProxyUpgrade interface.
type MockIProxyUpgrade struct {
	ctrl     *gomock.Controller
	recorder *MockIProxyUpgradeMockRecorder
}

// MockIProxyUpgradeMockRecorder is the mock recorder for MockIProxyUpgrade.
type MockIProxyUpgradeMockRecorder struct {
	mock *MockIProxyUpgrade
}

// NewMockIProxyUpgrade creates a new mock instance.
func NewMockIProxyUpgrade(ctrl *gomock.Controller) *MockIProxyUpgrade {
	mock := &MockIProxyUpgrade{ctrl: ctrl}
	mock.recorder = &MockIProxyUpgradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProxyUpgrade) EXPECT() *MockIProxyUpgradeMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIProxyUpgrade) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.ProxyUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.ProxyUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIProxyUpgradeMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IProxyUpgradeCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIProxyUpgrade)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IProxyUpgradeCursorListCall{Call: call}
}

// IProxyUpgradeCursorListCall wrap *gomock.Call
type IProxyUpgradeCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeCursorListCall) Return(arg0 []*storage.ProxyUpgrade, arg1 error) *IProxyUpgradeCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.ProxyUpgrade, error)) *IProxyUpgradeCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.ProxyUpgrade, error)) *IProxyUpgradeCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIProxyUpgrade) GetByID(ctx context.Context, id uint64) (*storage.ProxyUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.ProxyUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIProxyUpgradeMockRecorder) GetByID(ctx, id any) *IProxyUpgradeGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIProxyUpgrade)(nil).GetByID), ctx, id)
	return &IProxyUpgradeGetByIDCall{Call: call}
}

// IProxyUpgradeGetByIDCall wrap *gomock.Call
type IProxyUpgradeGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeGetByIDCall) Return(arg0 *storage.ProxyUpgrade, arg1 error) *IProxyUpgradeGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeGetByIDCall) Do(f func(context.Context, uint64) (*storage.ProxyUpgrade, error)) *IProxyUpgradeGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.ProxyUpgrade, error)) *IProxyUpgradeGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIProxyUpgrade) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIProxyUpgradeMockRecorder) IsNoRows(err any) *IProxyUpgradeIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIProxyUpgrade)(nil).IsNoRows), err)
	return &IProxyUpgradeIsNoRowsCall{Call: call}
}

// IProxyUpgradeIsNoRowsCall wrap *gomock.Call
type IProxyUpgradeIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeIsNoRowsCall) Return(arg0 bool) *IProxyUpgradeIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeIsNoRowsCall) Do(f func(error) bool) *IProxyUpgradeIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeIsNoRowsCall) DoAndReturn(f func(error) bool) *IProxyUpgradeIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastBefore mocks base method.
func (m *MockIProxyUpgrade) LastBefore(ctx context.Context, hash, selector []byte, height uint64) (storage.ProxyUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBefore", ctx, hash, selector, height)
	ret0, _ := ret[0].(storage.ProxyUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBefore indicates an expected call of LastBefore.
func (mr *MockIProxyUpgradeMockRecorder) LastBefore(ctx, hash, selector, height any) *IProxyUpgradeLastBeforeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBefore", reflect.TypeOf((*MockIProxyUpgrade)(nil).LastBefore), ctx, hash, selector, height)
	return &IProxyUpgradeLastBeforeCall{Call: call}
}

// IProxyUpgradeLastBeforeCall wrap *gomock.Call
type IProxyUpgradeLastBeforeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeLastBeforeCall) Return(arg0 storage.ProxyUpgrade, arg1 error) *IProxyUpgradeLastBeforeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeLastBeforeCall) Do(f func(context.Context, []byte, []byte, uint64) (storage.ProxyUpgrade, error)) *IProxyUpgradeLastBeforeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeLastBeforeCall) DoAndReturn(f func(context.Context, []byte, []byte, uint64) (storage.ProxyUpgrade, error)) *IProxyUpgradeLastBeforeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIProxyUpgrade) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIProxyUpgradeMockRecorder) LastID(ctx any) *IProxyUpgradeLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIProxyUpgrade)(nil).LastID), ctx)
	return &IProxyUpgradeLastIDCall{Call: call}
}

// IProxyUpgradeLastIDCall wrap *gomock.Call
type IProxyUpgradeLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeLastIDCall) Return(arg0 uint64, arg1 error) *IProxyUpgradeLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeLastIDCall) Do(f func(context.Context) (uint64, error)) *IProxyUpgradeLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IProxyUpgradeLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIProxyUpgrade) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.ProxyUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.ProxyUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIProxyUpgradeMockRecorder) List(ctx, limit, offset, order any) *IProxyUpgradeListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIProxyUpgrade)(nil).List), ctx, limit, offset, order)
	return &IProxyUpgradeListCall{Call: call}
}

// IProxyUpgradeListCall wrap *gomock.Call
type IProxyUpgradeListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeListCall) Return(arg0 []*storage.ProxyUpgrade, arg1 error) *IProxyUpgradeListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.ProxyUpgrade, error)) *IProxyUpgradeListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.ProxyUpgrade, error)) *IProxyUpgradeListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListWithHeight mocks base method.
func (m *MockIProxyUpgrade) ListWithHeight(ctx context.Context, height uint64, limit, offset int) ([]storage.ProxyUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithHeight", ctx, height, limit, offset)
	ret0, _ := ret[0].([]storage.ProxyUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithHeight indicates an expected call of ListWithHeight.
func (mr *MockIProxyUpgradeMockRecorder) ListWithHeight(ctx, height, limit, offset any) *IProxyUpgradeListWithHeightCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithHeight", reflect.TypeOf((*MockIProxyUpgrade)(nil).ListWithHeight), ctx, height, limit, offset)
	return &IProxyUpgradeListWithHeightCall{Call: call}
}

// IProxyUpgradeListWithHeightCall wrap *gomock.Call
type IProxyUpgradeListWithHeightCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeListWithHeightCall) Return(arg0 []storage.ProxyUpgrade, arg1 error) *IProxyUpgradeListWithHeightCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeListWithHeightCall) Do(f func(context.Context, uint64, int, int) ([]storage.ProxyUpgrade, error)) *IProxyUpgradeListWithHeightCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeListWithHeightCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.ProxyUpgrade, error)) *IProxyUpgradeListWithHeightCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIProxyUpgrade) Save(ctx context.Context, m *storage.ProxyUpgrade) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIProxyUpgradeMockRecorder) Save(ctx, m any) *IProxyUpgradeSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIProxyUpgrade)(nil).Save), ctx, m)
	return &IProxyUpgradeSaveCall{Call: call}
}

// IProxyUpgradeSaveCall wrap *gomock.Call
type IProxyUpgradeSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeSaveCall) Return(arg0 error) *IProxyUpgradeSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeSaveCall) Do(f func(context.Context, *storage.ProxyUpgrade) error) *IProxyUpgradeSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeSaveCall) DoAndReturn(f func(context.Context, *storage.ProxyUpgrade) error) *IProxyUpgradeSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIProxyUpgrade) Update(ctx context.Context, m *storage.ProxyUpgrade) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIProxyUpgradeMockRecorder) Update(ctx, m any) *IProxyUpgradeUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIProxyUpgrade)(nil).Update), ctx, m)
	return &IProxyUpgradeUpdateCall{Call: call}
}

// IProxyUpgradeUpdateCall wrap *gomock.Call
type IProxyUpgradeUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpgradeUpdateCall) Return(arg0 error) *IProxyUpgradeUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpgradeUpdateCall) Do(f func(context.Context, *storage.ProxyUpgrade) error) *IProxyUpgradeUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpgradeUpdateCall) DoAndReturn(f func(context.Context, *storage.ProxyUpgrade) error) *IProxyUpgradeUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
