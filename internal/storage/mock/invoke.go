// Code generated by MockGen. DO NOT EDIT.
// Source: invoke.go
//
// Generated by this command:
//
//	mockgen -source=invoke.go -destination=mock/invoke.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIInvoke is a mock of IInvoke interface.
type MockIInvoke struct {
	ctrl     *gomock.Controller
	recorder *MockIInvokeMockRecorder
}

// MockIInvokeMockRecorder is the mock recorder for MockIInvoke.
type MockIInvokeMockRecorder struct {
	mock *MockIInvoke
}

// NewMockIInvoke creates a new mock instance.
func NewMockIInvoke(ctrl *gomock.Controller) *MockIInvoke {
	mock := &MockIInvoke{ctrl: ctrl}
	mock.recorder = &MockIInvokeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInvoke) EXPECT() *MockIInvokeMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIInvoke) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Invoke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Invoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIInvokeMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IInvokeCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIInvoke)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IInvokeCursorListCall{Call: call}
}

// IInvokeCursorListCall wrap *gomock.Call
type IInvokeCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeCursorListCall) Return(arg0 []*storage.Invoke, arg1 error) *IInvokeCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Invoke, error)) *IInvokeCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Invoke, error)) *IInvokeCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIInvoke) Filter(ctx context.Context, flt []storage.InvokeFilter, opts ...storage.FilterOption) ([]storage.Invoke, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Invoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIInvokeMockRecorder) Filter(ctx, flt any, opts ...any) *IInvokeFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIInvoke)(nil).Filter), varargs...)
	return &IInvokeFilterCall{Call: call}
}

// IInvokeFilterCall wrap *gomock.Call
type IInvokeFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeFilterCall) Return(arg0 []storage.Invoke, arg1 error) *IInvokeFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeFilterCall) Do(f func(context.Context, []storage.InvokeFilter, ...storage.FilterOption) ([]storage.Invoke, error)) *IInvokeFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeFilterCall) DoAndReturn(f func(context.Context, []storage.InvokeFilter, ...storage.FilterOption) ([]storage.Invoke, error)) *IInvokeFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIInvoke) GetByID(ctx context.Context, id uint64) (*storage.Invoke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Invoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIInvokeMockRecorder) GetByID(ctx, id any) *IInvokeGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIInvoke)(nil).GetByID), ctx, id)
	return &IInvokeGetByIDCall{Call: call}
}

// IInvokeGetByIDCall wrap *gomock.Call
type IInvokeGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeGetByIDCall) Return(arg0 *storage.Invoke, arg1 error) *IInvokeGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeGetByIDCall) Do(f func(context.Context, uint64) (*storage.Invoke, error)) *IInvokeGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Invoke, error)) *IInvokeGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIInvoke) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIInvokeMockRecorder) IsNoRows(err any) *IInvokeIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIInvoke)(nil).IsNoRows), err)
	return &IInvokeIsNoRowsCall{Call: call}
}

// IInvokeIsNoRowsCall wrap *gomock.Call
type IInvokeIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeIsNoRowsCall) Return(arg0 bool) *IInvokeIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeIsNoRowsCall) Do(f func(error) bool) *IInvokeIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeIsNoRowsCall) DoAndReturn(f func(error) bool) *IInvokeIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIInvoke) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIInvokeMockRecorder) LastID(ctx any) *IInvokeLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIInvoke)(nil).LastID), ctx)
	return &IInvokeLastIDCall{Call: call}
}

// IInvokeLastIDCall wrap *gomock.Call
type IInvokeLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeLastIDCall) Return(arg0 uint64, arg1 error) *IInvokeLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeLastIDCall) Do(f func(context.Context) (uint64, error)) *IInvokeLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IInvokeLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIInvoke) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Invoke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Invoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIInvokeMockRecorder) List(ctx, limit, offset, order any) *IInvokeListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIInvoke)(nil).List), ctx, limit, offset, order)
	return &IInvokeListCall{Call: call}
}

// IInvokeListCall wrap *gomock.Call
type IInvokeListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeListCall) Return(arg0 []*storage.Invoke, arg1 error) *IInvokeListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Invoke, error)) *IInvokeListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Invoke, error)) *IInvokeListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIInvoke) Save(ctx context.Context, m *storage.Invoke) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIInvokeMockRecorder) Save(ctx, m any) *IInvokeSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIInvoke)(nil).Save), ctx, m)
	return &IInvokeSaveCall{Call: call}
}

// IInvokeSaveCall wrap *gomock.Call
type IInvokeSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeSaveCall) Return(arg0 error) *IInvokeSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeSaveCall) Do(f func(context.Context, *storage.Invoke) error) *IInvokeSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeSaveCall) DoAndReturn(f func(context.Context, *storage.Invoke) error) *IInvokeSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIInvoke) Update(ctx context.Context, m *storage.Invoke) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIInvokeMockRecorder) Update(ctx, m any) *IInvokeUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIInvoke)(nil).Update), ctx, m)
	return &IInvokeUpdateCall{Call: call}
}

// IInvokeUpdateCall wrap *gomock.Call
type IInvokeUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInvokeUpdateCall) Return(arg0 error) *IInvokeUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInvokeUpdateCall) Do(f func(context.Context, *storage.Invoke) error) *IInvokeUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInvokeUpdateCall) DoAndReturn(f func(context.Context, *storage.Invoke) error) *IInvokeUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
