// Code generated by MockGen. DO NOT EDIT.
// Source: class_replace.go
//
// Generated by this command:
//
//	mockgen -source=class_replace.go -destination=mock/class_replace.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIClassReplace is a mock of IClassReplace interface.
type MockIClassReplace struct {
	ctrl     *gomock.Controller
	recorder *MockIClassReplaceMockRecorder
}

// MockIClassReplaceMockRecorder is the mock recorder for MockIClassReplace.
type MockIClassReplaceMockRecorder struct {
	mock *MockIClassReplace
}

// NewMockIClassReplace creates a new mock instance.
func NewMockIClassReplace(ctrl *gomock.Controller) *MockIClassReplace {
	mock := &MockIClassReplace{ctrl: ctrl}
	mock.recorder = &MockIClassReplaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClassReplace) EXPECT() *MockIClassReplaceMockRecorder {
	return m.recorder
}

// ByHeight mocks base method.
func (m *MockIClassReplace) ByHeight(ctx context.Context, height uint64) ([]storage.ClassReplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByHeight", ctx, height)
	ret0, _ := ret[0].([]storage.ClassReplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByHeight indicates an expected call of ByHeight.
func (mr *MockIClassReplaceMockRecorder) ByHeight(ctx, height any) *IClassReplaceByHeightCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByHeight", reflect.TypeOf((*MockIClassReplace)(nil).ByHeight), ctx, height)
	return &IClassReplaceByHeightCall{Call: call}
}

// IClassReplaceByHeightCall wrap *gomock.Call
type IClassReplaceByHeightCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceByHeightCall) Return(arg0 []storage.ClassReplace, arg1 error) *IClassReplaceByHeightCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceByHeightCall) Do(f func(context.Context, uint64) ([]storage.ClassReplace, error)) *IClassReplaceByHeightCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceByHeightCall) DoAndReturn(f func(context.Context, uint64) ([]storage.ClassReplace, error)) *IClassReplaceByHeightCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIClassReplace) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.ClassReplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.ClassReplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIClassReplaceMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IClassReplaceCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIClassReplace)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IClassReplaceCursorListCall{Call: call}
}

// IClassReplaceCursorListCall wrap *gomock.Call
type IClassReplaceCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceCursorListCall) Return(arg0 []*storage.ClassReplace, arg1 error) *IClassReplaceCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.ClassReplace, error)) *IClassReplaceCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.ClassReplace, error)) *IClassReplaceCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIClassReplace) GetByID(ctx context.Context, id uint64) (*storage.ClassReplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.ClassReplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIClassReplaceMockRecorder) GetByID(ctx, id any) *IClassReplaceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIClassReplace)(nil).GetByID), ctx, id)
	return &IClassReplaceGetByIDCall{Call: call}
}

// IClassReplaceGetByIDCall wrap *gomock.Call
type IClassReplaceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceGetByIDCall) Return(arg0 *storage.ClassReplace, arg1 error) *IClassReplaceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceGetByIDCall) Do(f func(context.Context, uint64) (*storage.ClassReplace, error)) *IClassReplaceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.ClassReplace, error)) *IClassReplaceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIClassReplace) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIClassReplaceMockRecorder) IsNoRows(err any) *IClassReplaceIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIClassReplace)(nil).IsNoRows), err)
	return &IClassReplaceIsNoRowsCall{Call: call}
}

// IClassReplaceIsNoRowsCall wrap *gomock.Call
type IClassReplaceIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceIsNoRowsCall) Return(arg0 bool) *IClassReplaceIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceIsNoRowsCall) Do(f func(error) bool) *IClassReplaceIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceIsNoRowsCall) DoAndReturn(f func(error) bool) *IClassReplaceIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIClassReplace) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIClassReplaceMockRecorder) LastID(ctx any) *IClassReplaceLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIClassReplace)(nil).LastID), ctx)
	return &IClassReplaceLastIDCall{Call: call}
}

// IClassReplaceLastIDCall wrap *gomock.Call
type IClassReplaceLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceLastIDCall) Return(arg0 uint64, arg1 error) *IClassReplaceLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceLastIDCall) Do(f func(context.Context) (uint64, error)) *IClassReplaceLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IClassReplaceLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIClassReplace) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.ClassReplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.ClassReplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIClassReplaceMockRecorder) List(ctx, limit, offset, order any) *IClassReplaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIClassReplace)(nil).List), ctx, limit, offset, order)
	return &IClassReplaceListCall{Call: call}
}

// IClassReplaceListCall wrap *gomock.Call
type IClassReplaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceListCall) Return(arg0 []*storage.ClassReplace, arg1 error) *IClassReplaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.ClassReplace, error)) *IClassReplaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.ClassReplace, error)) *IClassReplaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIClassReplace) Save(ctx context.Context, m *storage.ClassReplace) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIClassReplaceMockRecorder) Save(ctx, m any) *IClassReplaceSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIClassReplace)(nil).Save), ctx, m)
	return &IClassReplaceSaveCall{Call: call}
}

// IClassReplaceSaveCall wrap *gomock.Call
type IClassReplaceSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceSaveCall) Return(arg0 error) *IClassReplaceSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceSaveCall) Do(f func(context.Context, *storage.ClassReplace) error) *IClassReplaceSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceSaveCall) DoAndReturn(f func(context.Context, *storage.ClassReplace) error) *IClassReplaceSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIClassReplace) Update(ctx context.Context, m *storage.ClassReplace) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIClassReplaceMockRecorder) Update(ctx, m any) *IClassReplaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIClassReplace)(nil).Update), ctx, m)
	return &IClassReplaceUpdateCall{Call: call}
}

// IClassReplaceUpdateCall wrap *gomock.Call
type IClassReplaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IClassReplaceUpdateCall) Return(arg0 error) *IClassReplaceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IClassReplaceUpdateCall) Do(f func(context.Context, *storage.ClassReplace) error) *IClassReplaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IClassReplaceUpdateCall) DoAndReturn(f func(context.Context, *storage.ClassReplace) error) *IClassReplaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
