// Code generated by MockGen. DO NOT EDIT.
// Source: declare.go
//
// Generated by this command:
//
//	mockgen -source=declare.go -destination=mock/declare.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIDeclare is a mock of IDeclare interface.
type MockIDeclare struct {
	ctrl     *gomock.Controller
	recorder *MockIDeclareMockRecorder
}

// MockIDeclareMockRecorder is the mock recorder for MockIDeclare.
type MockIDeclareMockRecorder struct {
	mock *MockIDeclare
}

// NewMockIDeclare creates a new mock instance.
func NewMockIDeclare(ctrl *gomock.Controller) *MockIDeclare {
	mock := &MockIDeclare{ctrl: ctrl}
	mock.recorder = &MockIDeclareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeclare) EXPECT() *MockIDeclareMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIDeclare) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Declare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Declare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIDeclareMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IDeclareCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIDeclare)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IDeclareCursorListCall{Call: call}
}

// IDeclareCursorListCall wrap *gomock.Call
type IDeclareCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareCursorListCall) Return(arg0 []*storage.Declare, arg1 error) *IDeclareCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Declare, error)) *IDeclareCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Declare, error)) *IDeclareCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIDeclare) Filter(ctx context.Context, flt []storage.DeclareFilter, opts ...storage.FilterOption) ([]storage.Declare, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Declare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIDeclareMockRecorder) Filter(ctx, flt any, opts ...any) *IDeclareFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIDeclare)(nil).Filter), varargs...)
	return &IDeclareFilterCall{Call: call}
}

// IDeclareFilterCall wrap *gomock.Call
type IDeclareFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareFilterCall) Return(arg0 []storage.Declare, arg1 error) *IDeclareFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareFilterCall) Do(f func(context.Context, []storage.DeclareFilter, ...storage.FilterOption) ([]storage.Declare, error)) *IDeclareFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareFilterCall) DoAndReturn(f func(context.Context, []storage.DeclareFilter, ...storage.FilterOption) ([]storage.Declare, error)) *IDeclareFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIDeclare) GetByID(ctx context.Context, id uint64) (*storage.Declare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Declare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIDeclareMockRecorder) GetByID(ctx, id any) *IDeclareGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDeclare)(nil).GetByID), ctx, id)
	return &IDeclareGetByIDCall{Call: call}
}

// IDeclareGetByIDCall wrap *gomock.Call
type IDeclareGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareGetByIDCall) Return(arg0 *storage.Declare, arg1 error) *IDeclareGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareGetByIDCall) Do(f func(context.Context, uint64) (*storage.Declare, error)) *IDeclareGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Declare, error)) *IDeclareGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIDeclare) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIDeclareMockRecorder) IsNoRows(err any) *IDeclareIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIDeclare)(nil).IsNoRows), err)
	return &IDeclareIsNoRowsCall{Call: call}
}

// IDeclareIsNoRowsCall wrap *gomock.Call
type IDeclareIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareIsNoRowsCall) Return(arg0 bool) *IDeclareIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareIsNoRowsCall) Do(f func(error) bool) *IDeclareIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareIsNoRowsCall) DoAndReturn(f func(error) bool) *IDeclareIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIDeclare) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIDeclareMockRecorder) LastID(ctx any) *IDeclareLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIDeclare)(nil).LastID), ctx)
	return &IDeclareLastIDCall{Call: call}
}

// IDeclareLastIDCall wrap *gomock.Call
type IDeclareLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareLastIDCall) Return(arg0 uint64, arg1 error) *IDeclareLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareLastIDCall) Do(f func(context.Context) (uint64, error)) *IDeclareLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IDeclareLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIDeclare) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Declare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Declare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIDeclareMockRecorder) List(ctx, limit, offset, order any) *IDeclareListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIDeclare)(nil).List), ctx, limit, offset, order)
	return &IDeclareListCall{Call: call}
}

// IDeclareListCall wrap *gomock.Call
type IDeclareListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareListCall) Return(arg0 []*storage.Declare, arg1 error) *IDeclareListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Declare, error)) *IDeclareListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Declare, error)) *IDeclareListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIDeclare) Save(ctx context.Context, m *storage.Declare) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDeclareMockRecorder) Save(ctx, m any) *IDeclareSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDeclare)(nil).Save), ctx, m)
	return &IDeclareSaveCall{Call: call}
}

// IDeclareSaveCall wrap *gomock.Call
type IDeclareSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareSaveCall) Return(arg0 error) *IDeclareSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareSaveCall) Do(f func(context.Context, *storage.Declare) error) *IDeclareSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareSaveCall) DoAndReturn(f func(context.Context, *storage.Declare) error) *IDeclareSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIDeclare) Update(ctx context.Context, m *storage.Declare) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDeclareMockRecorder) Update(ctx, m any) *IDeclareUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDeclare)(nil).Update), ctx, m)
	return &IDeclareUpdateCall{Call: call}
}

// IDeclareUpdateCall wrap *gomock.Call
type IDeclareUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeclareUpdateCall) Return(arg0 error) *IDeclareUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeclareUpdateCall) Do(f func(context.Context, *storage.Declare) error) *IDeclareUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeclareUpdateCall) DoAndReturn(f func(context.Context, *storage.Declare) error) *IDeclareUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
