// Code generated by MockGen. DO NOT EDIT.
// Source: fee.go
//
// Generated by this command:
//
//	mockgen -source=fee.go -destination=mock/fee.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIFee is a mock of IFee interface.
type MockIFee struct {
	ctrl     *gomock.Controller
	recorder *MockIFeeMockRecorder
}

// MockIFeeMockRecorder is the mock recorder for MockIFee.
type MockIFeeMockRecorder struct {
	mock *MockIFee
}

// NewMockIFee creates a new mock instance.
func NewMockIFee(ctrl *gomock.Controller) *MockIFee {
	mock := &MockIFee{ctrl: ctrl}
	mock.recorder = &MockIFeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFee) EXPECT() *MockIFeeMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIFee) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIFeeMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IFeeCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIFee)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IFeeCursorListCall{Call: call}
}

// IFeeCursorListCall wrap *gomock.Call
type IFeeCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeCursorListCall) Return(arg0 []*storage.Fee, arg1 error) *IFeeCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Fee, error)) *IFeeCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Fee, error)) *IFeeCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIFee) Filter(ctx context.Context, flt []storage.FeeFilter, opts ...storage.FilterOption) ([]storage.Fee, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIFeeMockRecorder) Filter(ctx, flt any, opts ...any) *IFeeFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIFee)(nil).Filter), varargs...)
	return &IFeeFilterCall{Call: call}
}

// IFeeFilterCall wrap *gomock.Call
type IFeeFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeFilterCall) Return(arg0 []storage.Fee, arg1 error) *IFeeFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeFilterCall) Do(f func(context.Context, []storage.FeeFilter, ...storage.FilterOption) ([]storage.Fee, error)) *IFeeFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeFilterCall) DoAndReturn(f func(context.Context, []storage.FeeFilter, ...storage.FilterOption) ([]storage.Fee, error)) *IFeeFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIFee) GetByID(ctx context.Context, id uint64) (*storage.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIFeeMockRecorder) GetByID(ctx, id any) *IFeeGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIFee)(nil).GetByID), ctx, id)
	return &IFeeGetByIDCall{Call: call}
}

// IFeeGetByIDCall wrap *gomock.Call
type IFeeGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeGetByIDCall) Return(arg0 *storage.Fee, arg1 error) *IFeeGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeGetByIDCall) Do(f func(context.Context, uint64) (*storage.Fee, error)) *IFeeGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Fee, error)) *IFeeGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIFee) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIFeeMockRecorder) IsNoRows(err any) *IFeeIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIFee)(nil).IsNoRows), err)
	return &IFeeIsNoRowsCall{Call: call}
}

// IFeeIsNoRowsCall wrap *gomock.Call
type IFeeIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeIsNoRowsCall) Return(arg0 bool) *IFeeIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeIsNoRowsCall) Do(f func(error) bool) *IFeeIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeIsNoRowsCall) DoAndReturn(f func(error) bool) *IFeeIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIFee) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIFeeMockRecorder) LastID(ctx any) *IFeeLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIFee)(nil).LastID), ctx)
	return &IFeeLastIDCall{Call: call}
}

// IFeeLastIDCall wrap *gomock.Call
type IFeeLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeLastIDCall) Return(arg0 uint64, arg1 error) *IFeeLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeLastIDCall) Do(f func(context.Context) (uint64, error)) *IFeeLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IFeeLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIFee) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIFeeMockRecorder) List(ctx, limit, offset, order any) *IFeeListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIFee)(nil).List), ctx, limit, offset, order)
	return &IFeeListCall{Call: call}
}

// IFeeListCall wrap *gomock.Call
type IFeeListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeListCall) Return(arg0 []*storage.Fee, arg1 error) *IFeeListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Fee, error)) *IFeeListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Fee, error)) *IFeeListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIFee) Save(ctx context.Context, m *storage.Fee) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIFeeMockRecorder) Save(ctx, m any) *IFeeSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIFee)(nil).Save), ctx, m)
	return &IFeeSaveCall{Call: call}
}

// IFeeSaveCall wrap *gomock.Call
type IFeeSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeSaveCall) Return(arg0 error) *IFeeSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeSaveCall) Do(f func(context.Context, *storage.Fee) error) *IFeeSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeSaveCall) DoAndReturn(f func(context.Context, *storage.Fee) error) *IFeeSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIFee) Update(ctx context.Context, m *storage.Fee) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIFeeMockRecorder) Update(ctx, m any) *IFeeUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIFee)(nil).Update), ctx, m)
	return &IFeeUpdateCall{Call: call}
}

// IFeeUpdateCall wrap *gomock.Call
type IFeeUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IFeeUpdateCall) Return(arg0 error) *IFeeUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IFeeUpdateCall) Do(f func(context.Context, *storage.Fee) error) *IFeeUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IFeeUpdateCall) DoAndReturn(f func(context.Context, *storage.Fee) error) *IFeeUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
