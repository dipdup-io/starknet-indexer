// Code generated by MockGen. DO NOT EDIT.
// Source: proxy.go
//
// Generated by this command:
//
//	mockgen -source=proxy.go -destination=mock/proxy.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIProxy is a mock of IProxy interface.
type MockIProxy struct {
	ctrl     *gomock.Controller
	recorder *MockIProxyMockRecorder
}

// MockIProxyMockRecorder is the mock recorder for MockIProxy.
type MockIProxyMockRecorder struct {
	mock *MockIProxy
}

// NewMockIProxy creates a new mock instance.
func NewMockIProxy(ctrl *gomock.Controller) *MockIProxy {
	mock := &MockIProxy{ctrl: ctrl}
	mock.recorder = &MockIProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProxy) EXPECT() *MockIProxyMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIProxy) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIProxyMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IProxyCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIProxy)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IProxyCursorListCall{Call: call}
}

// IProxyCursorListCall wrap *gomock.Call
type IProxyCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyCursorListCall) Return(arg0 []*storage.Proxy, arg1 error) *IProxyCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Proxy, error)) *IProxyCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Proxy, error)) *IProxyCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByHash mocks base method.
func (m *MockIProxy) GetByHash(ctx context.Context, address, selector []byte) (storage.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", ctx, address, selector)
	ret0, _ := ret[0].(storage.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockIProxyMockRecorder) GetByHash(ctx, address, selector any) *IProxyGetByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockIProxy)(nil).GetByHash), ctx, address, selector)
	return &IProxyGetByHashCall{Call: call}
}

// IProxyGetByHashCall wrap *gomock.Call
type IProxyGetByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyGetByHashCall) Return(arg0 storage.Proxy, arg1 error) *IProxyGetByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyGetByHashCall) Do(f func(context.Context, []byte, []byte) (storage.Proxy, error)) *IProxyGetByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyGetByHashCall) DoAndReturn(f func(context.Context, []byte, []byte) (storage.Proxy, error)) *IProxyGetByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIProxy) GetByID(ctx context.Context, id uint64) (*storage.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIProxyMockRecorder) GetByID(ctx, id any) *IProxyGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIProxy)(nil).GetByID), ctx, id)
	return &IProxyGetByIDCall{Call: call}
}

// IProxyGetByIDCall wrap *gomock.Call
type IProxyGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyGetByIDCall) Return(arg0 *storage.Proxy, arg1 error) *IProxyGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyGetByIDCall) Do(f func(context.Context, uint64) (*storage.Proxy, error)) *IProxyGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Proxy, error)) *IProxyGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIProxy) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIProxyMockRecorder) IsNoRows(err any) *IProxyIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIProxy)(nil).IsNoRows), err)
	return &IProxyIsNoRowsCall{Call: call}
}

// IProxyIsNoRowsCall wrap *gomock.Call
type IProxyIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyIsNoRowsCall) Return(arg0 bool) *IProxyIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyIsNoRowsCall) Do(f func(error) bool) *IProxyIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyIsNoRowsCall) DoAndReturn(f func(error) bool) *IProxyIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIProxy) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIProxyMockRecorder) LastID(ctx any) *IProxyLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIProxy)(nil).LastID), ctx)
	return &IProxyLastIDCall{Call: call}
}

// IProxyLastIDCall wrap *gomock.Call
type IProxyLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyLastIDCall) Return(arg0 uint64, arg1 error) *IProxyLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyLastIDCall) Do(f func(context.Context) (uint64, error)) *IProxyLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IProxyLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIProxy) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIProxyMockRecorder) List(ctx, limit, offset, order any) *IProxyListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIProxy)(nil).List), ctx, limit, offset, order)
	return &IProxyListCall{Call: call}
}

// IProxyListCall wrap *gomock.Call
type IProxyListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyListCall) Return(arg0 []*storage.Proxy, arg1 error) *IProxyListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Proxy, error)) *IProxyListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Proxy, error)) *IProxyListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIProxy) Save(ctx context.Context, m *storage.Proxy) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIProxyMockRecorder) Save(ctx, m any) *IProxySaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIProxy)(nil).Save), ctx, m)
	return &IProxySaveCall{Call: call}
}

// IProxySaveCall wrap *gomock.Call
type IProxySaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxySaveCall) Return(arg0 error) *IProxySaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxySaveCall) Do(f func(context.Context, *storage.Proxy) error) *IProxySaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxySaveCall) DoAndReturn(f func(context.Context, *storage.Proxy) error) *IProxySaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIProxy) Update(ctx context.Context, m *storage.Proxy) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIProxyMockRecorder) Update(ctx, m any) *IProxyUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIProxy)(nil).Update), ctx, m)
	return &IProxyUpdateCall{Call: call}
}

// IProxyUpdateCall wrap *gomock.Call
type IProxyUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IProxyUpdateCall) Return(arg0 error) *IProxyUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IProxyUpdateCall) Do(f func(context.Context, *storage.Proxy) error) *IProxyUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IProxyUpdateCall) DoAndReturn(f func(context.Context, *storage.Proxy) error) *IProxyUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
