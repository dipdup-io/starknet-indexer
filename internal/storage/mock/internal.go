// Code generated by MockGen. DO NOT EDIT.
// Source: internal.go
//
// Generated by this command:
//
//	mockgen -source=internal.go -destination=mock/internal.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIInternal is a mock of IInternal interface.
type MockIInternal struct {
	ctrl     *gomock.Controller
	recorder *MockIInternalMockRecorder
}

// MockIInternalMockRecorder is the mock recorder for MockIInternal.
type MockIInternalMockRecorder struct {
	mock *MockIInternal
}

// NewMockIInternal creates a new mock instance.
func NewMockIInternal(ctrl *gomock.Controller) *MockIInternal {
	mock := &MockIInternal{ctrl: ctrl}
	mock.recorder = &MockIInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInternal) EXPECT() *MockIInternalMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIInternal) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Internal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Internal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIInternalMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IInternalCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIInternal)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IInternalCursorListCall{Call: call}
}

// IInternalCursorListCall wrap *gomock.Call
type IInternalCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalCursorListCall) Return(arg0 []*storage.Internal, arg1 error) *IInternalCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Internal, error)) *IInternalCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Internal, error)) *IInternalCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIInternal) Filter(ctx context.Context, flt []storage.InternalFilter, opts ...storage.FilterOption) ([]storage.Internal, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Internal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIInternalMockRecorder) Filter(ctx, flt any, opts ...any) *IInternalFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIInternal)(nil).Filter), varargs...)
	return &IInternalFilterCall{Call: call}
}

// IInternalFilterCall wrap *gomock.Call
type IInternalFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalFilterCall) Return(arg0 []storage.Internal, arg1 error) *IInternalFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalFilterCall) Do(f func(context.Context, []storage.InternalFilter, ...storage.FilterOption) ([]storage.Internal, error)) *IInternalFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalFilterCall) DoAndReturn(f func(context.Context, []storage.InternalFilter, ...storage.FilterOption) ([]storage.Internal, error)) *IInternalFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIInternal) GetByID(ctx context.Context, id uint64) (*storage.Internal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Internal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIInternalMockRecorder) GetByID(ctx, id any) *IInternalGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIInternal)(nil).GetByID), ctx, id)
	return &IInternalGetByIDCall{Call: call}
}

// IInternalGetByIDCall wrap *gomock.Call
type IInternalGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalGetByIDCall) Return(arg0 *storage.Internal, arg1 error) *IInternalGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalGetByIDCall) Do(f func(context.Context, uint64) (*storage.Internal, error)) *IInternalGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Internal, error)) *IInternalGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIInternal) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIInternalMockRecorder) IsNoRows(err any) *IInternalIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIInternal)(nil).IsNoRows), err)
	return &IInternalIsNoRowsCall{Call: call}
}

// IInternalIsNoRowsCall wrap *gomock.Call
type IInternalIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalIsNoRowsCall) Return(arg0 bool) *IInternalIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalIsNoRowsCall) Do(f func(error) bool) *IInternalIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalIsNoRowsCall) DoAndReturn(f func(error) bool) *IInternalIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIInternal) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIInternalMockRecorder) LastID(ctx any) *IInternalLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIInternal)(nil).LastID), ctx)
	return &IInternalLastIDCall{Call: call}
}

// IInternalLastIDCall wrap *gomock.Call
type IInternalLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalLastIDCall) Return(arg0 uint64, arg1 error) *IInternalLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalLastIDCall) Do(f func(context.Context) (uint64, error)) *IInternalLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IInternalLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIInternal) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Internal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Internal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIInternalMockRecorder) List(ctx, limit, offset, order any) *IInternalListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIInternal)(nil).List), ctx, limit, offset, order)
	return &IInternalListCall{Call: call}
}

// IInternalListCall wrap *gomock.Call
type IInternalListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalListCall) Return(arg0 []*storage.Internal, arg1 error) *IInternalListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Internal, error)) *IInternalListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Internal, error)) *IInternalListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIInternal) Save(ctx context.Context, m *storage.Internal) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIInternalMockRecorder) Save(ctx, m any) *IInternalSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIInternal)(nil).Save), ctx, m)
	return &IInternalSaveCall{Call: call}
}

// IInternalSaveCall wrap *gomock.Call
type IInternalSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalSaveCall) Return(arg0 error) *IInternalSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalSaveCall) Do(f func(context.Context, *storage.Internal) error) *IInternalSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalSaveCall) DoAndReturn(f func(context.Context, *storage.Internal) error) *IInternalSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIInternal) Update(ctx context.Context, m *storage.Internal) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIInternalMockRecorder) Update(ctx, m any) *IInternalUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIInternal)(nil).Update), ctx, m)
	return &IInternalUpdateCall{Call: call}
}

// IInternalUpdateCall wrap *gomock.Call
type IInternalUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IInternalUpdateCall) Return(arg0 error) *IInternalUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IInternalUpdateCall) Do(f func(context.Context, *storage.Internal) error) *IInternalUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IInternalUpdateCall) DoAndReturn(f func(context.Context, *storage.Internal) error) *IInternalUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
