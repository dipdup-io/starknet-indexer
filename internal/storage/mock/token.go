// Code generated by MockGen. DO NOT EDIT.
// Source: token.go
//
// Generated by this command:
//
//	mockgen -source=token.go -destination=mock/token.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIToken is a mock of IToken interface.
type MockIToken struct {
	ctrl     *gomock.Controller
	recorder *MockITokenMockRecorder
}

// MockITokenMockRecorder is the mock recorder for MockIToken.
type MockITokenMockRecorder struct {
	mock *MockIToken
}

// NewMockIToken creates a new mock instance.
func NewMockIToken(ctrl *gomock.Controller) *MockIToken {
	mock := &MockIToken{ctrl: ctrl}
	mock.recorder = &MockITokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIToken) EXPECT() *MockITokenMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIToken) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockITokenMockRecorder) CursorList(ctx, id, limit, order, cmp any) *ITokenCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIToken)(nil).CursorList), ctx, id, limit, order, cmp)
	return &ITokenCursorListCall{Call: call}
}

// ITokenCursorListCall wrap *gomock.Call
type ITokenCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenCursorListCall) Return(arg0 []*storage.Token, arg1 error) *ITokenCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Token, error)) *ITokenCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Token, error)) *ITokenCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIToken) Filter(ctx context.Context, flt []storage.TokenFilter, opts ...storage.FilterOption) ([]storage.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockITokenMockRecorder) Filter(ctx, flt any, opts ...any) *ITokenFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIToken)(nil).Filter), varargs...)
	return &ITokenFilterCall{Call: call}
}

// ITokenFilterCall wrap *gomock.Call
type ITokenFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenFilterCall) Return(arg0 []storage.Token, arg1 error) *ITokenFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenFilterCall) Do(f func(context.Context, []storage.TokenFilter, ...storage.FilterOption) ([]storage.Token, error)) *ITokenFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenFilterCall) DoAndReturn(f func(context.Context, []storage.TokenFilter, ...storage.FilterOption) ([]storage.Token, error)) *ITokenFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Find mocks base method.
func (m *MockIToken) Find(ctx context.Context, contractId uint64, tokenId string) (storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, contractId, tokenId)
	ret0, _ := ret[0].(storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockITokenMockRecorder) Find(ctx, contractId, tokenId any) *ITokenFindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIToken)(nil).Find), ctx, contractId, tokenId)
	return &ITokenFindCall{Call: call}
}

// ITokenFindCall wrap *gomock.Call
type ITokenFindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenFindCall) Return(arg0 storage.Token, arg1 error) *ITokenFindCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenFindCall) Do(f func(context.Context, uint64, string) (storage.Token, error)) *ITokenFindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenFindCall) DoAndReturn(f func(context.Context, uint64, string) (storage.Token, error)) *ITokenFindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIToken) GetByID(ctx context.Context, id uint64) (*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITokenMockRecorder) GetByID(ctx, id any) *ITokenGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIToken)(nil).GetByID), ctx, id)
	return &ITokenGetByIDCall{Call: call}
}

// ITokenGetByIDCall wrap *gomock.Call
type ITokenGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenGetByIDCall) Return(arg0 *storage.Token, arg1 error) *ITokenGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenGetByIDCall) Do(f func(context.Context, uint64) (*storage.Token, error)) *ITokenGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Token, error)) *ITokenGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIToken) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockITokenMockRecorder) IsNoRows(err any) *ITokenIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIToken)(nil).IsNoRows), err)
	return &ITokenIsNoRowsCall{Call: call}
}

// ITokenIsNoRowsCall wrap *gomock.Call
type ITokenIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenIsNoRowsCall) Return(arg0 bool) *ITokenIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenIsNoRowsCall) Do(f func(error) bool) *ITokenIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenIsNoRowsCall) DoAndReturn(f func(error) bool) *ITokenIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIToken) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockITokenMockRecorder) LastID(ctx any) *ITokenLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIToken)(nil).LastID), ctx)
	return &ITokenLastIDCall{Call: call}
}

// ITokenLastIDCall wrap *gomock.Call
type ITokenLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenLastIDCall) Return(arg0 uint64, arg1 error) *ITokenLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenLastIDCall) Do(f func(context.Context) (uint64, error)) *ITokenLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *ITokenLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIToken) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockITokenMockRecorder) List(ctx, limit, offset, order any) *ITokenListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIToken)(nil).List), ctx, limit, offset, order)
	return &ITokenListCall{Call: call}
}

// ITokenListCall wrap *gomock.Call
type ITokenListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenListCall) Return(arg0 []*storage.Token, arg1 error) *ITokenListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Token, error)) *ITokenListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Token, error)) *ITokenListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByType mocks base method.
func (m *MockIToken) ListByType(ctx context.Context, typ storage.TokenType, limit, offset uint64, order storage0.SortOrder) ([]storage.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByType", ctx, typ, limit, offset, order)
	ret0, _ := ret[0].([]storage.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByType indicates an expected call of ListByType.
func (mr *MockITokenMockRecorder) ListByType(ctx, typ, limit, offset, order any) *ITokenListByTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByType", reflect.TypeOf((*MockIToken)(nil).ListByType), ctx, typ, limit, offset, order)
	return &ITokenListByTypeCall{Call: call}
}

// ITokenListByTypeCall wrap *gomock.Call
type ITokenListByTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenListByTypeCall) Return(arg0 []storage.Token, arg1 error) *ITokenListByTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenListByTypeCall) Do(f func(context.Context, storage.TokenType, uint64, uint64, storage0.SortOrder) ([]storage.Token, error)) *ITokenListByTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenListByTypeCall) DoAndReturn(f func(context.Context, storage.TokenType, uint64, uint64, storage0.SortOrder) ([]storage.Token, error)) *ITokenListByTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIToken) Save(ctx context.Context, m *storage.Token) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITokenMockRecorder) Save(ctx, m any) *ITokenSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIToken)(nil).Save), ctx, m)
	return &ITokenSaveCall{Call: call}
}

// ITokenSaveCall wrap *gomock.Call
type ITokenSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenSaveCall) Return(arg0 error) *ITokenSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenSaveCall) Do(f func(context.Context, *storage.Token) error) *ITokenSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenSaveCall) DoAndReturn(f func(context.Context, *storage.Token) error) *ITokenSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIToken) Update(ctx context.Context, m *storage.Token) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITokenMockRecorder) Update(ctx, m any) *ITokenUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIToken)(nil).Update), ctx, m)
	return &ITokenUpdateCall{Call: call}
}

// ITokenUpdateCall wrap *gomock.Call
type ITokenUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ITokenUpdateCall) Return(arg0 error) *ITokenUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ITokenUpdateCall) Do(f func(context.Context, *storage.Token) error) *ITokenUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ITokenUpdateCall) DoAndReturn(f func(context.Context, *storage.Token) error) *ITokenUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
