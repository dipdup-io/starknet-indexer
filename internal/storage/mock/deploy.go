// Code generated by MockGen. DO NOT EDIT.
// Source: deploy.go
//
// Generated by this command:
//
//	mockgen -source=deploy.go -destination=mock/deploy.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/dipdup-io/starknet-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIDeploy is a mock of IDeploy interface.
type MockIDeploy struct {
	ctrl     *gomock.Controller
	recorder *MockIDeployMockRecorder
}

// MockIDeployMockRecorder is the mock recorder for MockIDeploy.
type MockIDeployMockRecorder struct {
	mock *MockIDeploy
}

// NewMockIDeploy creates a new mock instance.
func NewMockIDeploy(ctrl *gomock.Controller) *MockIDeploy {
	mock := &MockIDeploy{ctrl: ctrl}
	mock.recorder = &MockIDeployMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeploy) EXPECT() *MockIDeployMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockIDeploy) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIDeployMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IDeployCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIDeploy)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IDeployCursorListCall{Call: call}
}

// IDeployCursorListCall wrap *gomock.Call
type IDeployCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployCursorListCall) Return(arg0 []*storage.Deploy, arg1 error) *IDeployCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Deploy, error)) *IDeployCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Deploy, error)) *IDeployCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockIDeploy) Filter(ctx context.Context, flt []storage.DeployFilter, opts ...storage.FilterOption) ([]storage.Deploy, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, flt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].([]storage.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockIDeployMockRecorder) Filter(ctx, flt any, opts ...any) *IDeployFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, flt}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockIDeploy)(nil).Filter), varargs...)
	return &IDeployFilterCall{Call: call}
}

// IDeployFilterCall wrap *gomock.Call
type IDeployFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployFilterCall) Return(arg0 []storage.Deploy, arg1 error) *IDeployFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployFilterCall) Do(f func(context.Context, []storage.DeployFilter, ...storage.FilterOption) ([]storage.Deploy, error)) *IDeployFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployFilterCall) DoAndReturn(f func(context.Context, []storage.DeployFilter, ...storage.FilterOption) ([]storage.Deploy, error)) *IDeployFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIDeploy) GetByID(ctx context.Context, id uint64) (*storage.Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIDeployMockRecorder) GetByID(ctx, id any) *IDeployGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDeploy)(nil).GetByID), ctx, id)
	return &IDeployGetByIDCall{Call: call}
}

// IDeployGetByIDCall wrap *gomock.Call
type IDeployGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployGetByIDCall) Return(arg0 *storage.Deploy, arg1 error) *IDeployGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployGetByIDCall) Do(f func(context.Context, uint64) (*storage.Deploy, error)) *IDeployGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Deploy, error)) *IDeployGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIDeploy) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIDeployMockRecorder) IsNoRows(err any) *IDeployIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIDeploy)(nil).IsNoRows), err)
	return &IDeployIsNoRowsCall{Call: call}
}

// IDeployIsNoRowsCall wrap *gomock.Call
type IDeployIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployIsNoRowsCall) Return(arg0 bool) *IDeployIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployIsNoRowsCall) Do(f func(error) bool) *IDeployIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployIsNoRowsCall) DoAndReturn(f func(error) bool) *IDeployIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIDeploy) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIDeployMockRecorder) LastID(ctx any) *IDeployLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIDeploy)(nil).LastID), ctx)
	return &IDeployLastIDCall{Call: call}
}

// IDeployLastIDCall wrap *gomock.Call
type IDeployLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployLastIDCall) Return(arg0 uint64, arg1 error) *IDeployLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployLastIDCall) Do(f func(context.Context) (uint64, error)) *IDeployLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IDeployLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIDeploy) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIDeployMockRecorder) List(ctx, limit, offset, order any) *IDeployListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIDeploy)(nil).List), ctx, limit, offset, order)
	return &IDeployListCall{Call: call}
}

// IDeployListCall wrap *gomock.Call
type IDeployListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployListCall) Return(arg0 []*storage.Deploy, arg1 error) *IDeployListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Deploy, error)) *IDeployListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Deploy, error)) *IDeployListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIDeploy) Save(ctx context.Context, m *storage.Deploy) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDeployMockRecorder) Save(ctx, m any) *IDeploySaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDeploy)(nil).Save), ctx, m)
	return &IDeploySaveCall{Call: call}
}

// IDeploySaveCall wrap *gomock.Call
type IDeploySaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeploySaveCall) Return(arg0 error) *IDeploySaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeploySaveCall) Do(f func(context.Context, *storage.Deploy) error) *IDeploySaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeploySaveCall) DoAndReturn(f func(context.Context, *storage.Deploy) error) *IDeploySaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIDeploy) Update(ctx context.Context, m *storage.Deploy) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDeployMockRecorder) Update(ctx, m any) *IDeployUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDeploy)(nil).Update), ctx, m)
	return &IDeployUpdateCall{Call: call}
}

// IDeployUpdateCall wrap *gomock.Call
type IDeployUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IDeployUpdateCall) Return(arg0 error) *IDeployUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IDeployUpdateCall) Do(f func(context.Context, *storage.Deploy) error) *IDeployUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IDeployUpdateCall) DoAndReturn(f func(context.Context, *storage.Deploy) error) *IDeployUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
